{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// https://snippet-generator.app/
	// https: //stackoverflow.com/questions/29995863/how-to-add-custom-code-snippets-in-vscode
	"main function in c++": {
		"prefix": "main",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"#define fi first",
			"#define se second",
			"#define pb push_back",
			"#define pf push_front",
			"#define mp make_pair",
			"#define mod (int)1e9+7",
			"#define eps (double)1e-9",
			"#define INF 1011111111",
			"#define pi  3.1415926535897932384626433832795",
			"#define sz(a)   ((int)(a.size()))",
			"#define all(a)  a.begin(), a.end()",
			"#define cin1(x)   cin >> (x)",
			"#define cin2(x,y)   cin >> (x) >> (y)",
			"#define cin3(x,y,z)   cin >> (x) >> (y) >> (z)",
			"#define cin4(w,x,y,z)   cin>> (w) >> (x) >> (y) >> (z)",
			"#define cout1(x)   cout << (x) << endl",
			"#define cout2(x,y) cout << (x) <<\" \"<< (y) << endl",
			"#define cout3(x,y,z) cout << (x) <<\" \"<< (y) <<\" \"<< (z) << endl",
			"#define UNIQ(a) a.erase(unique(all(a)), a.end())",
			"#define FREIN(FILE) freopen(FILE,\"rt\",stdin)",
			"#define FREOUT(FILE) freopen(FILE,\"wt\",stdout)",
			"#define endl \"\\n\"",
			"",
			"template <typename T> T sqr(T a) {return (a) * (a);}",
			"template <typename T> T dist(T x1, T y1, T x2, T y2) {return sqrt(sqr(x1-x2) + sqr(y1-y2));}",
			"template <typename T> T angle(T x1, T y1, T x2, T y2){ return atan2(double(y1-y2) , double(x1-x2));}",
			"",
			"typedef long long ll;",
			"typedef long double ld;",
			"typedef unsigned int uint;",
			"typedef unsigned char uchar;",
			"typedef unsigned long long ull;",
			"typedef pair<int,int> pii;",
			"typedef pair<long long,long long> pll;",
			"typedef vector<int> vi;",
			"typedef vector<long long> vll;",
			"",
			"",
			"",
			"int main() {",
			"    $3",
			"}"
		],
		"description": "main function in c++"
	},
	"main with testCases": {
		"prefix": "tmain",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"#define fi first",
			"#define se second",
			"#define pb push_back",
			"#define pf push_front",
			"#define mp make_pair",
			"#define mod (int)1e9+7",
			"#define eps (double)1e-9",
			"#define INF 1011111111",
			"#define pi  3.1415926535897932384626433832795",
			"#define sz(a)   ((int)(a.size()))",
			"#define all(a)  a.begin(), a.end()",
			"#define cin1(x)   cin >> (x)",
			"#define cin2(x,y)   cin >> (x) >> (y)",
			"#define cin3(x,y,z)   cin >> (x) >> (y) >> (z)",
			"#define cout1(x)   cout << (x) << endl",
			"#define cout2(x,y) cout << (x) <<\" \"<< (y) << endl",
			"#define cout3(x,y,z) cout << (x) <<\" \"<< (y) <<\" \"<< (z) << endl",
			"#define UNIQ(a) a.erase(unique(all(a)), a.end())",
			"#define FREIN(FILE) freopen(FILE,\"rt\",stdin)",
			"#define FREOUT(FILE) freopen(FILE,\"wt\",stdout)",
			"#define endl \"\\n\"",
			"",
			"template <typename T> T sqr(T a) {return (a) * (a);}",
			"template <typename T> T dist(T x1, T y1, T x2, T y2) {return sqrt(sqr(x1-x2) + sqr(y1-y2));}",
			"template <typename T> T angle(T x1, T y1, T x2, T y2){ return atan2(double(y1-y2) , double(x1-x2));}",
			"",
			"typedef long long ll;",
			"typedef long double ld;",
			"typedef unsigned int uint;",
			"typedef unsigned char uchar;",
			"typedef unsigned long long ull;",
			"typedef pair<int,int> pii;",
			"typedef pair<long long,long long> pll;",
			"typedef vector<int> vi;",
			"typedef vector<long long> vll;",
			"",
			"void solve() {",
			"    $3",
			"}",
			"",
			"int main() {",
			"    ll testCases; cin >> testCases;",
			"    while (testCases--) { solve(); }",
			"}"
		],
		"description": "main with testCases"
	},
	"for huge i/o": {
		"prefix": "fastio",
		"body": [
			"void fastIo() { ios::sync_with_stdio(0); cin.tie(0); }"
		],
		"description": "for huge i/o"
	},
	"square": {
		"prefix": "sqaure",
		"body": [
			"long long square(long long a) { return (a) * (a); }"
		],
		"description": "sqaring a number"
	},
	"sorting an array": {
		"prefix": "sorta",
		"body": [
			"sort(arr, arr+n);"
		],
		"description": "sorting an array"
	},
	"for i loop": {
		"prefix": "fori",
		"body": [
			"for (int i = 0; i < n; i++) ",
		],
		"description": "for i loop"
	},
	"for j loop": {
		"prefix": "forj",
		"body": [
			"for (int j = 0; j < n; j++) ",
		],
		"description": "for i loop"
	},
	"for i j loop": {
		"prefix": "forij",
		"body": [
			"for (int i = 0; i < n; i++) {",
			" for (int j = 0; j < n; j++) {",
			"      ",
			"  }",
			"}"
		],
		"description": "for i j loop"
	},
	"for i j k loop": {
		"prefix": "forijk",
		"body": [
			"for (int i = 0; i < n; i++) {",
			" for (int j = 0; j < n; j++) {",
			"    for (int k = 0; k < n; k++) {",
			"      ",
			"    }",
			"  }",
			"}"
		],
		"description": "for i j k loop"
	},
	"binary string ": {
		"prefix": "binary_str",
		"body": [
			"string binary(int num, int n) {",
			"    string b;",
			"    for (int i = n; i >= 0; i--) {",
			"        b += to_string((num >> i) & 1);",
			"    }",
			"    return b;",
			"}"
		],
		"description": "binary string "
	}
	// "console out for 1 param": {
	// 	"prefix": "cout1",
	// 	"body": [
	// 		"cout << $3 << endl;"
	// 	],
	// 	"description": "end line of a output"
	// },
	// "console out for 2 param": {
	// 	"prefix": "cout2",
	// 	"body": [
	// 		"cout << $3 << \" \" <<  << endl;"
	// 	],
	// 	"description": "end line of a output"
	// },
	// "console out for 3 param": {
	// 	"prefix": "cout3",
	// 	"body": [
	// 		"cout << $3 <<  <<  <<  endl;"
	// 	],
	// 	"description": "end line of a output"
	// },
	// "console input for 1 param": {
	// 	"prefix": "cin1",
	// 	"body": [
	// 		"cin >> $3;"
	// 	],
	// 	"description": "takes 1 inp"
	// },
	// "console input for 2 param": {
	// 	"prefix": "cin2",
	// 	"body": [
	// 		"cin >> $3 >> ;"
	// 	],
	// 	"description": "takes 2 inp"
	// },
	// "console input for 3 param": {
	// 	"prefix": "cin3",
	// 	"body": [
	// 		"cin >> $3 >>  >> ;"
	// 	],
	// 	"description": "takes 3 inp"
	// },
}